!function (window, a, b) {
    function c(b, c) { this.wrapper = "string" == typeof b ? a.querySelector(b) : b, this.scroller = this.wrapper.children[0], this.scrollerStyle = this.scroller.style, this.options = { resizeScrollbars: !0, mouseWheelSpeed: 20, snapThreshold: .334, disablePointer: !g.hasPointer, disableTouch: g.hasPointer || !g.hasTouch, disableMouse: g.hasPointer || g.hasTouch, startX: 0, startY: 0, scrollY: !0, directionLockThreshold: 5, momentum: !0, bounce: !0, bounceTime: 600, bounceEasing: "", preventDefault: !0, preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ }, HWCompositing: !0, useTransition: !0, useTransform: !0, bindToWrapper: "undefined" == typeof window.onmousedown }; for (var d in c) this.options[d] = c[d]; this.translateZ = this.options.HWCompositing && g.hasPerspective ? " translateZ(0)" : "", this.options.useTransition = g.hasTransition && this.options.useTransition, this.options.useTransform = g.hasTransform && this.options.useTransform, this.options.eventPassthrough = this.options.eventPassthrough === !0 ? "vertical" : this.options.eventPassthrough, this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault, this.options.scrollY = "vertical" != this.options.eventPassthrough && this.options.scrollY, this.options.scrollX = "horizontal" != this.options.eventPassthrough && this.options.scrollX, this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough, this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold, this.options.bounceEasing = "string" == typeof this.options.bounceEasing ? g.ease[this.options.bounceEasing] || g.ease.circular : this.options.bounceEasing, this.options.resizePolling = void 0 === this.options.resizePolling ? 60 : this.options.resizePolling, this.options.tap === !0 && (this.options.tap = "tap"), this.options.useTransition || this.options.useTransform || /relative|absolute/i.test(this.scrollerStyle.position) || (this.scrollerStyle.position = "relative"), "scale" == this.options.shrinkScrollbars && (this.options.useTransition = !1), this.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1, 3 == this.options.probeType && (this.options.useTransition = !1), this.x = 0, this.y = 0, this.directionX = 0, this.directionY = 0, this._events = {}, this._init(), this.refresh(), this.scrollTo(this.options.startX, this.options.startY), this.enable() } function d(b, c, d) { var e = a.createElement("div"), f = a.createElement("div"); return d === !0 && (e.style.cssText = "position:absolute;z-index:9999", f.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px"), f.className = "iScrollIndicator", "h" == b ? (d === !0 && (e.style.cssText += ";height:7px;left:2px;right:2px;bottom:0", f.style.height = "100%"), e.className = "iScrollHorizontalScrollbar") : (d === !0 && (e.style.cssText += ";width:7px;bottom:2px;top:2px;right:1px", f.style.width = "100%"), e.className = "iScrollVerticalScrollbar"), e.style.cssText += ";overflow:hidden", c || (e.style.pointerEvents = "none"), e.appendChild(f), e } function e(b, c) { this.wrapper = "string" == typeof c.el ? a.querySelector(c.el) : c.el, this.wrapperStyle = this.wrapper.style, this.indicator = this.wrapper.children[0], this.indicatorStyle = this.indicator.style, this.scroller = b, this.options = { listenX: !0, listenY: !0, interactive: !1, resize: !0, defaultScrollbars: !1, shrink: !1, fade: !1, speedRatioX: 0, speedRatioY: 0 }; for (var d in c) this.options[d] = c[d]; if (this.sizeRatioX = 1, this.sizeRatioY = 1, this.maxPosX = 0, this.maxPosY = 0, this.options.interactive && (this.options.disableTouch || (g.addEvent(this.indicator, "touchstart", this), g.addEvent(window, "touchend", this)), this.options.disablePointer || (g.addEvent(this.indicator, g.prefixPointerEvent("pointerdown"), this), g.addEvent(window, g.prefixPointerEvent("pointerup"), this)), this.options.disableMouse || (g.addEvent(this.indicator, "mousedown", this), g.addEvent(window, "mouseup", this))), this.options.fade) { this.wrapperStyle[g.style.transform] = this.scroller.translateZ; var e = g.style.transitionDuration; if (!e) return; this.wrapperStyle[e] = g.isBadAndroid ? "0.0001ms" : "0ms"; var h = this; g.isBadAndroid && f(function () { "0.0001ms" === h.wrapperStyle[e] && (h.wrapperStyle[e] = "0s") }), this.wrapperStyle.opacity = "0" } } var f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (a) { window.setTimeout(a, 1e3 / 60) }, g = function () { function c(a) { return f !== !1 && ("" === f ? a : f + a.charAt(0).toUpperCase() + a.substr(1)) } var d = {}, e = a.createElement("div").style, f = function () { for (var a, b = ["t", "webkitT", "MozT", "msT", "OT"], c = 0, d = b.length; c < d; c++) if (a = b[c] + "ransform", a in e) return b[c].substr(0, b[c].length - 1); return !1 }(); d.getTime = Date.now || function () { return (new Date).getTime() }, d.extend = function (a, b) { for (var c in b) a[c] = b[c] }, d.addEvent = function (a, b, c, d) { a.addEventListener(b, c, !!d) }, d.removeEvent = function (a, b, c, d) { a.removeEventListener(b, c, !!d) }, d.prefixPointerEvent = function (a) { return window.MSPointerEvent ? "MSPointer" + a.charAt(7).toUpperCase() + a.substr(8) : a }, d.momentum = function (a, c, d, e, f, g) { var h, i, j = a - c, k = b.abs(j) / d; return g = void 0 === g ? 6e-4 : g, h = a + k * k / (2 * g) * (j < 0 ? -1 : 1), i = k / g, h < e ? (h = f ? e - f / 2.5 * (k / 8) : e, j = b.abs(h - a), i = j / k) : h > 0 && (h = f ? f / 2.5 * (k / 8) : 0, j = b.abs(a) + h, i = j / k), { destination: b.round(h), duration: i } }; var g = c("transform"); return d.extend(d, { hasTransform: g !== !1, hasPerspective: c("perspective") in e, hasTouch: "ontouchstart" in window, hasPointer: !(!window.PointerEvent && !window.MSPointerEvent), hasTransition: c("transition") in e }), d.isBadAndroid = function () { var a = window.navigator.appVersion; if (/Android/.test(a) && !/Chrome\/\d/.test(a)) { var b = a.match(/Safari\/(\d+.\d)/); return !(b && "object" == typeof b && b.length >= 2) || parseFloat(b[1]) < 535.19 } return !1 }(), d.extend(d.style = {}, { transform: g, transitionTimingFunction: c("transitionTimingFunction"), transitionDuration: c("transitionDuration"), transitionDelay: c("transitionDelay"), transformOrigin: c("transformOrigin") }), d.hasClass = function (a, b) { var c = new RegExp("(^|\\s)" + b + "(\\s|$)"); return c.test(a.className) }, d.addClass = function (a, b) { if (!d.hasClass(a, b)) { var c = a.className.split(" "); c.push(b), a.className = c.join(" ") } }, d.removeClass = function (a, b) { if (d.hasClass(a, b)) { var c = new RegExp("(^|\\s)" + b + "(\\s|$)", "g"); a.className = a.className.replace(c, " ") } }, d.offset = function (a) { for (var b = -a.offsetLeft, c = -a.offsetTop; a = a.offsetParent;) b -= a.offsetLeft, c -= a.offsetTop; return { left: b, top: c } }, d.preventDefaultException = function (a, b) { for (var c in b) if (b[c].test(a[c])) return !0; return !1 }, d.extend(d.eventType = {}, { touchstart: 1, touchmove: 1, touchend: 1, mousedown: 2, mousemove: 2, mouseup: 2, pointerdown: 3, pointermove: 3, pointerup: 3, MSPointerDown: 3, MSPointerMove: 3, MSPointerUp: 3 }), d.extend(d.ease = {}, { quadratic: { style: "cubic-bezier(0.25, 0.46, 0.45, 0.94)", fn: function (a) { return a * (2 - a) } }, circular: { style: "cubic-bezier(0.1, 0.57, 0.1, 1)", fn: function (a) { return b.sqrt(1 - --a * a) } }, back: { style: "cubic-bezier(0.175, 0.885, 0.32, 1.275)", fn: function (a) { var b = 4; return (a -= 1) * a * ((b + 1) * a + b) + 1 } }, bounce: { style: "", fn: function (a) { return (a /= 1) < 1 / 2.75 ? 7.5625 * a * a : a < 2 / 2.75 ? 7.5625 * (a -= 1.5 / 2.75) * a + .75 : a < 2.5 / 2.75 ? 7.5625 * (a -= 2.25 / 2.75) * a + .9375 : 7.5625 * (a -= 2.625 / 2.75) * a + .984375 } }, elastic: { style: "", fn: function (a) { var c = .22, d = .4; return 0 === a ? 0 : 1 == a ? 1 : d * b.pow(2, -10 * a) * b.sin((a - c / 4) * (2 * b.PI) / c) + 1 } } }), d.tap = function (b, c) { var d = a.createEvent("Event"); d.initEvent(c, !0, !0), d.pageX = b.pageX, d.pageY = b.pageY, b.target.dispatchEvent(d) }, d.click = function (b) { var c, d = b.target; /(SELECT|INPUT|TEXTAREA)/i.test(d.tagName) || (c = a.createEvent(window.MouseEvent ? "MouseEvents" : "Event"), c.initEvent("click", !0, !0), c.view = b.view || window, c.detail = 1, c.screenX = d.screenX || 0, c.screenY = d.screenY || 0, c.clientX = d.clientX || 0, c.clientY = d.clientY || 0, c.ctrlKey = !!b.ctrlKey, c.altKey = !!b.altKey, c.shiftKey = !!b.shiftKey, c.metaKey = !!b.metaKey, c.button = 0, c.relatedTarget = null, c._constructed = !0, d.dispatchEvent(c)) }, d }(); c.prototype = { version: "5.2.0", _init: function () { this._initEvents(), (this.options.scrollbars || this.options.indicators) && this._initIndicators(), this.options.mouseWheel && this._initWheel(), this.options.snap && this._initSnap(), this.options.keyBindings && this._initKeys() }, destroy: function () { this._initEvents(!0), clearTimeout(this.resizeTimeout), this.resizeTimeout = null, this._execEvent("destroy") }, _transitionEnd: function (a) { a.target == this.scroller && this.isInTransition && (this._transitionTime(), this.resetPosition(this.options.bounceTime) || (this.isInTransition = !1, this._execEvent("scrollEnd"))) }, _start: function (a) { if (1 != g.eventType[a.type]) { var c; if (c = a.which ? a.button : a.button < 2 ? 0 : 4 == a.button ? 1 : 2, 0 !== c) return } if (this.enabled && (!this.initiated || g.eventType[a.type] === this.initiated)) { !this.options.preventDefault || g.isBadAndroid || g.preventDefaultException(a.target, this.options.preventDefaultException) || a.preventDefault(); var d, e = a.touches ? a.touches[0] : a; this.initiated = g.eventType[a.type], this.moved = !1, this.distX = 0, this.distY = 0, this.directionX = 0, this.directionY = 0, this.directionLocked = 0, this.startTime = g.getTime(), this.options.useTransition && this.isInTransition ? (this._transitionTime(), this.isInTransition = !1, d = this.getComputedPosition(), this._translate(b.round(d.x), b.round(d.y)), this._execEvent("scrollEnd")) : !this.options.useTransition && this.isAnimating && (this.isAnimating = !1, this._execEvent("scrollEnd")), this.startX = this.x, this.startY = this.y, this.absStartX = this.x, this.absStartY = this.y, this.pointX = e.pageX, this.pointY = e.pageY, this._execEvent("beforeScrollStart") } }, _move: function (a) { if (this.enabled && g.eventType[a.type] === this.initiated) { this.options.preventDefault && a.preventDefault(); var c, d, e, f, h = a.touches ? a.touches[0] : a, i = h.pageX - this.pointX, j = h.pageY - this.pointY, k = g.getTime(); if (this.pointX = h.pageX, this.pointY = h.pageY, this.distX += i, this.distY += j, e = b.abs(this.distX), f = b.abs(this.distY), !(k - this.endTime > 300 && e < 10 && f < 10)) { if (this.directionLocked || this.options.freeScroll || (e > f + this.options.directionLockThreshold ? this.directionLocked = "h" : f >= e + this.options.directionLockThreshold ? this.directionLocked = "v" : this.directionLocked = "n"), "h" == this.directionLocked) { if ("vertical" == this.options.eventPassthrough) a.preventDefault(); else if ("horizontal" == this.options.eventPassthrough) return void (this.initiated = !1); j = 0 } else if ("v" == this.directionLocked) { if ("horizontal" == this.options.eventPassthrough) a.preventDefault(); else if ("vertical" == this.options.eventPassthrough) return void (this.initiated = !1); i = 0 } i = this.hasHorizontalScroll ? i : 0, j = this.hasVerticalScroll ? j : 0, c = this.x + i, d = this.y + j, (c > 0 || c < this.maxScrollX) && (c = this.options.bounce ? this.x + i / 3 : c > 0 ? 0 : this.maxScrollX), (d > 0 || d < this.maxScrollY) && (d = this.options.bounce ? this.y + j / 3 : d > 0 ? 0 : this.maxScrollY), this.directionX = i > 0 ? -1 : i < 0 ? 1 : 0, this.directionY = j > 0 ? -1 : j < 0 ? 1 : 0, this.moved || this._execEvent("scrollStart"), this.moved = !0, this._translate(c, d), k - this.startTime > 300 && (this.startTime = k, this.startX = this.x, this.startY = this.y, 1 == this.options.probeType && this._execEvent("scroll")), this.options.probeType > 1 && this._execEvent("scroll") } } }, _end: function (a) { if (this.enabled && g.eventType[a.type] === this.initiated) { this.options.preventDefault && !g.preventDefaultException(a.target, this.options.preventDefaultException) && a.preventDefault(); var c, d, e = (a.changedTouches ? a.changedTouches[0] : a, g.getTime() - this.startTime), f = b.round(this.x), h = b.round(this.y), i = b.abs(f - this.startX), j = b.abs(h - this.startY), k = 0, l = ""; if (this.isInTransition = 0, this.initiated = 0, this.endTime = g.getTime(), !this.resetPosition(this.options.bounceTime)) { if (this.scrollTo(f, h), !this.moved) return this.options.tap && g.tap(a, this.options.tap), this.options.click && g.click(a), void this._execEvent("scrollCancel"); if (this._events.flick && e < 200 && i < 100 && j < 100) return void this._execEvent("flick"); if (this.options.momentum && e < 300 && (c = this.hasHorizontalScroll ? g.momentum(this.x, this.startX, e, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : { destination: f, duration: 0 }, d = this.hasVerticalScroll ? g.momentum(this.y, this.startY, e, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : { destination: h, duration: 0 }, f = c.destination, h = d.destination, k = b.max(c.duration, d.duration), this.isInTransition = 1), this.options.snap) { var m = this._nearestSnap(f, h); this.currentPage = m, k = this.options.snapSpeed || b.max(b.max(b.min(b.abs(f - m.x), 1e3), b.min(b.abs(h - m.y), 1e3)), 300), f = m.x, h = m.y, this.directionX = 0, this.directionY = 0, l = this.options.bounceEasing } return f != this.x || h != this.y ? ((f > 0 || f < this.maxScrollX || h > 0 || h < this.maxScrollY) && (l = g.ease.quadratic), void this.scrollTo(f, h, k, l)) : void this._execEvent("scrollEnd") } } }, _resize: function () { var a = this; clearTimeout(this.resizeTimeout), this.resizeTimeout = setTimeout(function () { a.refresh() }, this.options.resizePolling) }, resetPosition: function (a) { var b = this.x, c = this.y; return a = a || 0, !this.hasHorizontalScroll || this.x > 0 ? b = 0 : this.x < this.maxScrollX && (b = this.maxScrollX), !this.hasVerticalScroll || this.y > 0 ? c = 0 : this.y < this.maxScrollY && (c = this.maxScrollY), (b != this.x || c != this.y) && (this.scrollTo(b, c, a, this.options.bounceEasing), !0) }, disable: function () { this.enabled = !1 }, enable: function () { this.enabled = !0 }, refresh: function () { this.wrapper.offsetHeight; this.wrapperWidth = this.wrapper.clientWidth, this.wrapperHeight = this.wrapper.clientHeight, this.scrollerWidth = this.scroller.offsetWidth, this.scrollerHeight = this.scroller.offsetHeight, this.maxScrollX = this.wrapperWidth - this.scrollerWidth, this.maxScrollY = this.wrapperHeight - this.scrollerHeight, this.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < 0, this.hasVerticalScroll = this.options.scrollY && this.maxScrollY < 0, this.hasHorizontalScroll || (this.maxScrollX = 0, this.scrollerWidth = this.wrapperWidth), this.hasVerticalScroll || (this.maxScrollY = 0, this.scrollerHeight = this.wrapperHeight), this.endTime = 0, this.directionX = 0, this.directionY = 0, this.wrapperOffset = g.offset(this.wrapper), this._execEvent("refresh"), this.resetPosition() }, on: function (a, b) { this._events[a] || (this._events[a] = []), this._events[a].push(b) }, off: function (a, b) { if (this._events[a]) { var c = this._events[a].indexOf(b); c > -1 && this._events[a].splice(c, 1) } }, _execEvent: function (a) { if (this._events[a]) { var b = 0, c = this._events[a].length; if (c) for (; b < c; b++) this._events[a][b].apply(this, [].slice.call(arguments, 1)) } }, scrollBy: function (a, b, c, d) { a = this.x + a, b = this.y + b, c = c || 0, this.scrollTo(a, b, c, d) }, scrollTo: function (a, b, c, d) { d = d || g.ease.circular, this.isInTransition = this.options.useTransition && c > 0; var e = this.options.useTransition && d.style; !c || e ? (e && (this._transitionTimingFunction(d.style), this._transitionTime(c)), this._translate(a, b)) : this._animate(a, b, c, d.fn) }, scrollToElement: function (a, c, d, e, f) { if (a = a.nodeType ? a : this.scroller.querySelector(a)) { var h = g.offset(a); h.left -= this.wrapperOffset.left, h.top -= this.wrapperOffset.top, d === !0 && (d = b.round(a.offsetWidth / 2 - this.wrapper.offsetWidth / 2)), e === !0 && (e = b.round(a.offsetHeight / 2 - this.wrapper.offsetHeight / 2)), h.left -= d || 0, h.top -= e || 0, h.left = h.left > 0 ? 0 : h.left < this.maxScrollX ? this.maxScrollX : h.left, h.top = h.top > 0 ? 0 : h.top < this.maxScrollY ? this.maxScrollY : h.top, c = void 0 === c || null === c || "auto" === c ? b.max(b.abs(this.x - h.left), b.abs(this.y - h.top)) : c, this.scrollTo(h.left, h.top, c, f) } }, _transitionTime: function (a) { if (this.options.useTransition) { a = a || 0; var b = g.style.transitionDuration; if (b) { if (this.scrollerStyle[b] = a + "ms", !a && g.isBadAndroid) { this.scrollerStyle[b] = "0.0001ms"; var c = this; f(function () { "0.0001ms" === c.scrollerStyle[b] && (c.scrollerStyle[b] = "0s") }) } if (this.indicators) for (var d = this.indicators.length; d--;) this.indicators[d].transitionTime(a) } } }, _transitionTimingFunction: function (a) { if (this.scrollerStyle[g.style.transitionTimingFunction] = a, this.indicators) for (var b = this.indicators.length; b--;) this.indicators[b].transitionTimingFunction(a) }, _translate: function (a, c) { if (this.options.useTransform ? this.scrollerStyle[g.style.transform] = "translate(" + a + "px," + c + "px)" + this.translateZ : (a = b.round(a), c = b.round(c), this.scrollerStyle.left = a + "px", this.scrollerStyle.top = c + "px"), this.x = a, this.y = c, this.indicators) for (var d = this.indicators.length; d--;) this.indicators[d].updatePosition() }, _initEvents: function (a) { var b = a ? g.removeEvent : g.addEvent, c = this.options.bindToWrapper ? this.wrapper : window; b(window, "orientationchange", this), b(window, "resize", this), this.options.click && b(this.wrapper, "click", this, !0), this.options.disableMouse || (b(this.wrapper, "mousedown", this), b(c, "mousemove", this), b(c, "mousecancel", this), b(c, "mouseup", this)), g.hasPointer && !this.options.disablePointer && (b(this.wrapper, g.prefixPointerEvent("pointerdown"), this), b(c, g.prefixPointerEvent("pointermove"), this), b(c, g.prefixPointerEvent("pointercancel"), this), b(c, g.prefixPointerEvent("pointerup"), this)), g.hasTouch && !this.options.disableTouch && (b(this.wrapper, "touchstart", this), b(c, "touchmove", this), b(c, "touchcancel", this), b(c, "touchend", this)), b(this.scroller, "transitionend", this), b(this.scroller, "webkitTransitionEnd", this), b(this.scroller, "oTransitionEnd", this), b(this.scroller, "MSTransitionEnd", this) }, getComputedPosition: function () { var a, b, c = window.getComputedStyle(this.scroller, null); return this.options.useTransform ? (c = c[g.style.transform].split(")")[0].split(", "), a = +(c[12] || c[4]), b = +(c[13] || c[5])) : (a = +c.left.replace(/[^-\d.]/g, ""), b = +c.top.replace(/[^-\d.]/g, "")), { x: a, y: b } }, _initIndicators: function () { function a(a) { if (h.indicators) for (var b = h.indicators.length; b--;) a.call(h.indicators[b]) } var b, c = this.options.interactiveScrollbars, f = "string" != typeof this.options.scrollbars, g = [], h = this; this.indicators = [], this.options.scrollbars && (this.options.scrollY && (b = { el: d("v", c, this.options.scrollbars), interactive: c, defaultScrollbars: !0, customStyle: f, resize: this.options.resizeScrollbars, shrink: this.options.shrinkScrollbars, fade: this.options.fadeScrollbars, listenX: !1 }, this.wrapper.appendChild(b.el), g.push(b)), this.options.scrollX && (b = { el: d("h", c, this.options.scrollbars), interactive: c, defaultScrollbars: !0, customStyle: f, resize: this.options.resizeScrollbars, shrink: this.options.shrinkScrollbars, fade: this.options.fadeScrollbars, listenY: !1 }, this.wrapper.appendChild(b.el), g.push(b))), this.options.indicators && (g = g.concat(this.options.indicators)); for (var i = g.length; i--;) this.indicators.push(new e(this, g[i])); this.options.fadeScrollbars && (this.on("scrollEnd", function () { a(function () { this.fade() }) }), this.on("scrollCancel", function () { a(function () { this.fade() }) }), this.on("scrollStart", function () { a(function () { this.fade(1) }) }), this.on("beforeScrollStart", function () { a(function () { this.fade(1, !0) }) })), this.on("refresh", function () { a(function () { this.refresh() }) }), this.on("destroy", function () { a(function () { this.destroy() }), delete this.indicators }) }, _initWheel: function () { g.addEvent(this.wrapper, "wheel", this), g.addEvent(this.wrapper, "mousewheel", this), g.addEvent(this.wrapper, "DOMMouseScroll", this), this.on("destroy", function () { clearTimeout(this.wheelTimeout), this.wheelTimeout = null, g.removeEvent(this.wrapper, "wheel", this), g.removeEvent(this.wrapper, "mousewheel", this), g.removeEvent(this.wrapper, "DOMMouseScroll", this) }) }, _wheel: function (a) { if (this.enabled) { a.preventDefault(); var c, d, e, f, g = this; if (void 0 === this.wheelTimeout && g._execEvent("scrollStart"), clearTimeout(this.wheelTimeout), this.wheelTimeout = setTimeout(function () { g.options.snap || g._execEvent("scrollEnd"), g.wheelTimeout = void 0 }, 400), "deltaX" in a) 1 === a.deltaMode ? (c = -a.deltaX * this.options.mouseWheelSpeed, d = -a.deltaY * this.options.mouseWheelSpeed) : (c = -a.deltaX, d = -a.deltaY); else if ("wheelDeltaX" in a) c = a.wheelDeltaX / 120 * this.options.mouseWheelSpeed, d = a.wheelDeltaY / 120 * this.options.mouseWheelSpeed; else if ("wheelDelta" in a) c = d = a.wheelDelta / 120 * this.options.mouseWheelSpeed; else { if (!("detail" in a)) return; c = d = -a.detail / 3 * this.options.mouseWheelSpeed } if (c *= this.options.invertWheelDirection, d *= this.options.invertWheelDirection, this.hasVerticalScroll || (c = d, d = 0), this.options.snap) return e = this.currentPage.pageX, f = this.currentPage.pageY, c > 0 ? e-- : c < 0 && e++, d > 0 ? f-- : d < 0 && f++, void this.goToPage(e, f); e = this.x + b.round(this.hasHorizontalScroll ? c : 0), f = this.y + b.round(this.hasVerticalScroll ? d : 0), this.directionX = c > 0 ? -1 : c < 0 ? 1 : 0, this.directionY = d > 0 ? -1 : d < 0 ? 1 : 0, e > 0 ? e = 0 : e < this.maxScrollX && (e = this.maxScrollX), f > 0 ? f = 0 : f < this.maxScrollY && (f = this.maxScrollY), this.scrollTo(e, f, 0), this.options.probeType > 1 && this._execEvent("scroll") } }, _initSnap: function () { this.currentPage = {}, "string" == typeof this.options.snap && (this.options.snap = this.scroller.querySelectorAll(this.options.snap)), this.on("refresh", function () { var a, c, d, e, f, g, h = 0, i = 0, j = 0, k = this.options.snapStepX || this.wrapperWidth, l = this.options.snapStepY || this.wrapperHeight; if (this.pages = [], this.wrapperWidth && this.wrapperHeight && this.scrollerWidth && this.scrollerHeight) { if (this.options.snap === !0) for (d = b.round(k / 2), e = b.round(l / 2) ; j > -this.scrollerWidth;) { for (this.pages[h] = [], a = 0, f = 0; f > -this.scrollerHeight;) this.pages[h][a] = { x: b.max(j, this.maxScrollX), y: b.max(f, this.maxScrollY), width: k, height: l, cx: j - d, cy: f - e }, f -= l, a++; j -= k, h++ } else for (g = this.options.snap, a = g.length, c = -1; h < a; h++) (0 === h || g[h].offsetLeft <= g[h - 1].offsetLeft) && (i = 0, c++), this.pages[i] || (this.pages[i] = []), j = b.max(-g[h].offsetLeft, this.maxScrollX), f = b.max(-g[h].offsetTop, this.maxScrollY), d = j - b.round(g[h].offsetWidth / 2), e = f - b.round(g[h].offsetHeight / 2), this.pages[i][c] = { x: j, y: f, width: g[h].offsetWidth, height: g[h].offsetHeight, cx: d, cy: e }, j > this.maxScrollX && i++; this.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0), this.options.snapThreshold % 1 === 0 ? (this.snapThresholdX = this.options.snapThreshold, this.snapThresholdY = this.options.snapThreshold) : (this.snapThresholdX = b.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold), this.snapThresholdY = b.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold)) } }), this.on("flick", function () { var a = this.options.snapSpeed || b.max(b.max(b.min(b.abs(this.x - this.startX), 1e3), b.min(b.abs(this.y - this.startY), 1e3)), 300); this.goToPage(this.currentPage.pageX + this.directionX, this.currentPage.pageY + this.directionY, a) }) }, _nearestSnap: function (a, c) { if (!this.pages.length) return { x: 0, y: 0, pageX: 0, pageY: 0 }; var d = 0, e = this.pages.length, f = 0; if (b.abs(a - this.absStartX) < this.snapThresholdX && b.abs(c - this.absStartY) < this.snapThresholdY) return this.currentPage; for (a > 0 ? a = 0 : a < this.maxScrollX && (a = this.maxScrollX), c > 0 ? c = 0 : c < this.maxScrollY && (c = this.maxScrollY) ; d < e; d++) if (a >= this.pages[d][0].cx) { a = this.pages[d][0].x; break } for (e = this.pages[d].length; f < e; f++) if (c >= this.pages[0][f].cy) { c = this.pages[0][f].y; break } return d == this.currentPage.pageX && (d += this.directionX, d < 0 ? d = 0 : d >= this.pages.length && (d = this.pages.length - 1), a = this.pages[d][0].x), f == this.currentPage.pageY && (f += this.directionY, f < 0 ? f = 0 : f >= this.pages[0].length && (f = this.pages[0].length - 1), c = this.pages[0][f].y), { x: a, y: c, pageX: d, pageY: f } }, goToPage: function (a, c, d, e) { e = e || this.options.bounceEasing, a >= this.pages.length ? a = this.pages.length - 1 : a < 0 && (a = 0), c >= this.pages[a].length ? c = this.pages[a].length - 1 : c < 0 && (c = 0); var f = this.pages[a][c].x, g = this.pages[a][c].y; d = void 0 === d ? this.options.snapSpeed || b.max(b.max(b.min(b.abs(f - this.x), 1e3), b.min(b.abs(g - this.y), 1e3)), 300) : d, this.currentPage = { x: f, y: g, pageX: a, pageY: c }, this.scrollTo(f, g, d, e) }, next: function (a, b) { var c = this.currentPage.pageX, d = this.currentPage.pageY; c++, c >= this.pages.length && this.hasVerticalScroll && (c = 0, d++), this.goToPage(c, d, a, b) }, prev: function (a, b) { var c = this.currentPage.pageX, d = this.currentPage.pageY; c--, c < 0 && this.hasVerticalScroll && (c = 0, d--), this.goToPage(c, d, a, b) }, _initKeys: function (a) { var b, c = { pageUp: 33, pageDown: 34, end: 35, home: 36, left: 37, up: 38, right: 39, down: 40 }; if ("object" == typeof this.options.keyBindings) for (b in this.options.keyBindings) "string" == typeof this.options.keyBindings[b] && (this.options.keyBindings[b] = this.options.keyBindings[b].toUpperCase().charCodeAt(0)); else this.options.keyBindings = {}; for (b in c) this.options.keyBindings[b] = this.options.keyBindings[b] || c[b]; g.addEvent(window, "keydown", this), this.on("destroy", function () { g.removeEvent(window, "keydown", this) }) }, _key: function (a) { if (this.enabled) { var c, d = this.options.snap, e = d ? this.currentPage.pageX : this.x, f = d ? this.currentPage.pageY : this.y, h = g.getTime(), i = this.keyTime || 0, j = .25; switch (this.options.useTransition && this.isInTransition && (c = this.getComputedPosition(), this._translate(b.round(c.x), b.round(c.y)), this.isInTransition = !1), this.keyAcceleration = h - i < 200 ? b.min(this.keyAcceleration + j, 50) : 0, a.keyCode) { case this.options.keyBindings.pageUp: this.hasHorizontalScroll && !this.hasVerticalScroll ? e += d ? 1 : this.wrapperWidth : f += d ? 1 : this.wrapperHeight; break; case this.options.keyBindings.pageDown: this.hasHorizontalScroll && !this.hasVerticalScroll ? e -= d ? 1 : this.wrapperWidth : f -= d ? 1 : this.wrapperHeight; break; case this.options.keyBindings.end: e = d ? this.pages.length - 1 : this.maxScrollX, f = d ? this.pages[0].length - 1 : this.maxScrollY; break; case this.options.keyBindings.home: e = 0, f = 0; break; case this.options.keyBindings.left: e += d ? -1 : 5 + this.keyAcceleration >> 0; break; case this.options.keyBindings.up: f += d ? 1 : 5 + this.keyAcceleration >> 0; break; case this.options.keyBindings.right: e -= d ? -1 : 5 + this.keyAcceleration >> 0; break; case this.options.keyBindings.down: f -= d ? 1 : 5 + this.keyAcceleration >> 0; break; default: return } if (d) return void this.goToPage(e, f); e > 0 ? (e = 0, this.keyAcceleration = 0) : e < this.maxScrollX && (e = this.maxScrollX, this.keyAcceleration = 0), f > 0 ? (f = 0, this.keyAcceleration = 0) : f < this.maxScrollY && (f = this.maxScrollY, this.keyAcceleration = 0), this.scrollTo(e, f, 0), this.keyTime = h } }, _animate: function (a, b, c, d) { function e() { var m, n, o, p = g.getTime(); return p >= l ? (h.isAnimating = !1, h._translate(a, b), void (h.resetPosition(h.options.bounceTime) || h._execEvent("scrollEnd"))) : (p = (p - k) / c, o = d(p), m = (a - i) * o + i, n = (b - j) * o + j, h._translate(m, n), h.isAnimating && f(e), void (3 == h.options.probeType && h._execEvent("scroll"))) } var h = this, i = this.x, j = this.y, k = g.getTime(), l = k + c; this.isAnimating = !0, e() }, handleEvent: function (a) { switch (a.type) { case "touchstart": case "pointerdown": case "MSPointerDown": case "mousedown": this._start(a); break; case "touchmove": case "pointermove": case "MSPointerMove": case "mousemove": this._move(a); break; case "touchend": case "pointerup": case "MSPointerUp": case "mouseup": case "touchcancel": case "pointercancel": case "MSPointerCancel": case "mousecancel": this._end(a); break; case "orientationchange": case "resize": this._resize(); break; case "transitionend": case "webkitTransitionEnd": case "oTransitionEnd": case "MSTransitionEnd": this._transitionEnd(a); break; case "wheel": case "DOMMouseScroll": case "mousewheel": this._wheel(a); break; case "keydown": this._key(a); break; case "click": this.enabled && !a._constructed && (a.preventDefault(), a.stopPropagation()) } } }, e.prototype = {
        handleEvent: function (a) { switch (a.type) { case "touchstart": case "pointerdown": case "MSPointerDown": case "mousedown": this._start(a); break; case "touchmove": case "pointermove": case "MSPointerMove": case "mousemove": this._move(a); break; case "touchend": case "pointerup": case "MSPointerUp": case "mouseup": case "touchcancel": case "pointercancel": case "MSPointerCancel": case "mousecancel": this._end(a) } }, destroy: function () { this.options.fadeScrollbars && (clearTimeout(this.fadeTimeout), this.fadeTimeout = null), this.options.interactive && (g.removeEvent(this.indicator, "touchstart", this), g.removeEvent(this.indicator, g.prefixPointerEvent("pointerdown"), this), g.removeEvent(this.indicator, "mousedown", this), g.removeEvent(window, "touchmove", this), g.removeEvent(window, g.prefixPointerEvent("pointermove"), this), g.removeEvent(window, "mousemove", this), g.removeEvent(window, "touchend", this), g.removeEvent(window, g.prefixPointerEvent("pointerup"), this), g.removeEvent(window, "mouseup", this)), this.options.defaultScrollbars && this.wrapper.parentNode.removeChild(this.wrapper) }, _start: function (a) { var b = a.touches ? a.touches[0] : a; a.preventDefault(), a.stopPropagation(), this.transitionTime(), this.initiated = !0, this.moved = !1, this.lastPointX = b.pageX, this.lastPointY = b.pageY, this.startTime = g.getTime(), this.options.disableTouch || g.addEvent(window, "touchmove", this), this.options.disablePointer || g.addEvent(window, g.prefixPointerEvent("pointermove"), this), this.options.disableMouse || g.addEvent(window, "mousemove", this), this.scroller._execEvent("beforeScrollStart") }, _move: function (a) { var b, c, d, e, f = a.touches ? a.touches[0] : a, h = g.getTime(); this.moved || this.scroller._execEvent("scrollStart"), this.moved = !0, b = f.pageX - this.lastPointX, this.lastPointX = f.pageX, c = f.pageY - this.lastPointY, this.lastPointY = f.pageY, d = this.x + b, e = this.y + c, this._pos(d, e), 1 == this.scroller.options.probeType && h - this.startTime > 300 ? (this.startTime = h, this.scroller._execEvent("scroll")) : this.scroller.options.probeType > 1 && this.scroller._execEvent("scroll"), a.preventDefault(), a.stopPropagation() }, _end: function (a) { if (this.initiated) { if (this.initiated = !1, a.preventDefault(), a.stopPropagation(), g.removeEvent(window, "touchmove", this), g.removeEvent(window, g.prefixPointerEvent("pointermove"), this), g.removeEvent(window, "mousemove", this), this.scroller.options.snap) { var c = this.scroller._nearestSnap(this.scroller.x, this.scroller.y), d = this.options.snapSpeed || b.max(b.max(b.min(b.abs(this.scroller.x - c.x), 1e3), b.min(b.abs(this.scroller.y - c.y), 1e3)), 300); this.scroller.x == c.x && this.scroller.y == c.y || (this.scroller.directionX = 0, this.scroller.directionY = 0, this.scroller.currentPage = c, this.scroller.scrollTo(c.x, c.y, d, this.scroller.options.bounceEasing)) } this.moved && this.scroller._execEvent("scrollEnd") } }, transitionTime: function (a) { a = a || 0; var b = g.style.transitionDuration; if (b && (this.indicatorStyle[b] = a + "ms", !a && g.isBadAndroid)) { this.indicatorStyle[b] = "0.0001ms"; var c = this; f(function () { "0.0001ms" === c.indicatorStyle[b] && (c.indicatorStyle[b] = "0s") }) } }, transitionTimingFunction: function (a) { this.indicatorStyle[g.style.transitionTimingFunction] = a }, refresh: function () { this.transitionTime(), this.options.listenX && !this.options.listenY ? this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? "block" : "none" : this.options.listenY && !this.options.listenX ? this.indicatorStyle.display = this.scroller.hasVerticalScroll ? "block" : "none" : this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? "block" : "none", this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll ? (g.addClass(this.wrapper, "iScrollBothScrollbars"), g.removeClass(this.wrapper, "iScrollLoneScrollbar"), this.options.defaultScrollbars && this.options.customStyle && (this.options.listenX ? this.wrapper.style.right = "8px" : this.wrapper.style.bottom = "8px")) : (g.removeClass(this.wrapper, "iScrollBothScrollbars"), g.addClass(this.wrapper, "iScrollLoneScrollbar"), this.options.defaultScrollbars && this.options.customStyle && (this.options.listenX ? this.wrapper.style.right = "2px" : this.wrapper.style.bottom = "2px")); this.wrapper.offsetHeight; this.options.listenX && (this.wrapperWidth = this.wrapper.clientWidth, this.options.resize ? (this.indicatorWidth = b.max(b.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8), this.indicatorStyle.width = this.indicatorWidth + "px") : this.indicatorWidth = this.indicator.clientWidth, this.maxPosX = this.wrapperWidth - this.indicatorWidth, "clip" == this.options.shrink ? (this.minBoundaryX = -this.indicatorWidth + 8, this.maxBoundaryX = this.wrapperWidth - 8) : (this.minBoundaryX = 0, this.maxBoundaryX = this.maxPosX), this.sizeRatioX = this.options.speedRatioX || this.scroller.maxScrollX && this.maxPosX / this.scroller.maxScrollX), this.options.listenY && (this.wrapperHeight = this.wrapper.clientHeight, this.options.resize ? (this.indicatorHeight = b.max(b.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8), this.indicatorStyle.height = this.indicatorHeight + "px") : this.indicatorHeight = this.indicator.clientHeight, this.maxPosY = this.wrapperHeight - this.indicatorHeight, "clip" == this.options.shrink ? (this.minBoundaryY = -this.indicatorHeight + 8, this.maxBoundaryY = this.wrapperHeight - 8) : (this.minBoundaryY = 0, this.maxBoundaryY = this.maxPosY), this.maxPosY = this.wrapperHeight - this.indicatorHeight, this.sizeRatioY = this.options.speedRatioY || this.scroller.maxScrollY && this.maxPosY / this.scroller.maxScrollY), this.updatePosition() }, updatePosition: function () {
            var a = this.options.listenX && b.round(this.sizeRatioX * this.scroller.x) || 0, c = this.options.listenY && b.round(this.sizeRatioY * this.scroller.y) || 0; this.options.ignoreBoundaries || (a < this.minBoundaryX ? ("scale" == this.options.shrink && (this.width = b.max(this.indicatorWidth + a, 8),
            this.indicatorStyle.width = this.width + "px"), a = this.minBoundaryX) : a > this.maxBoundaryX ? "scale" == this.options.shrink ? (this.width = b.max(this.indicatorWidth - (a - this.maxPosX), 8), this.indicatorStyle.width = this.width + "px", a = this.maxPosX + this.indicatorWidth - this.width) : a = this.maxBoundaryX : "scale" == this.options.shrink && this.width != this.indicatorWidth && (this.width = this.indicatorWidth, this.indicatorStyle.width = this.width + "px"), c < this.minBoundaryY ? ("scale" == this.options.shrink && (this.height = b.max(this.indicatorHeight + 3 * c, 8), this.indicatorStyle.height = this.height + "px"), c = this.minBoundaryY) : c > this.maxBoundaryY ? "scale" == this.options.shrink ? (this.height = b.max(this.indicatorHeight - 3 * (c - this.maxPosY), 8), this.indicatorStyle.height = this.height + "px", c = this.maxPosY + this.indicatorHeight - this.height) : c = this.maxBoundaryY : "scale" == this.options.shrink && this.height != this.indicatorHeight && (this.height = this.indicatorHeight, this.indicatorStyle.height = this.height + "px")), this.x = a, this.y = c, this.scroller.options.useTransform ? this.indicatorStyle[g.style.transform] = "translate(" + a + "px," + c + "px)" + this.scroller.translateZ : (this.indicatorStyle.left = a + "px", this.indicatorStyle.top = c + "px")
        }, _pos: function (a, c) { a < 0 ? a = 0 : a > this.maxPosX && (a = this.maxPosX), c < 0 ? c = 0 : c > this.maxPosY && (c = this.maxPosY), a = this.options.listenX ? b.round(a / this.sizeRatioX) : this.scroller.x, c = this.options.listenY ? b.round(c / this.sizeRatioY) : this.scroller.y, this.scroller.scrollTo(a, c) }, fade: function (a, b) { if (!b || this.visible) { clearTimeout(this.fadeTimeout), this.fadeTimeout = null; var c = a ? 250 : 500, d = a ? 0 : 300; a = a ? "1" : "0", this.wrapperStyle[g.style.transitionDuration] = c + "ms", this.fadeTimeout = setTimeout(function (a) { this.wrapperStyle.opacity = a, this.visible = +a }.bind(this, a), d) } }
    }, c.utils = g, "undefined" != typeof module && module.exports ? module.exports = c : "function" == typeof define && define.amd ? define(function () { return c }) : window.IScroll = c
}(window, document, Math);